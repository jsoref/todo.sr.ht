// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"git.sr.ht/~sircmpwn/core-go/model"
)

type Entity interface {
	IsEntity()
}

type EventDetail interface {
	IsEventDetail()
}

type ACLCursor struct {
	Results []*TrackerACL `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type ACLInput struct {
	Browse  bool `json:"browse"`
	Submit  bool `json:"submit"`
	Comment bool `json:"comment"`
	Edit    bool `json:"edit"`
	Triage  bool `json:"triage"`
}

type EventCursor struct {
	Results []*Event      `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type LabelCursor struct {
	Results []*Label      `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type SubmitCommentInput struct {
	Text       string            `json:"text"`
	Status     *TicketStatus     `json:"status"`
	Resolution *TicketResolution `json:"resolution"`
}

type SubmitTicketInput struct {
	Subject     string     `json:"subject"`
	Body        *string    `json:"body"`
	Created     *time.Time `json:"created"`
	ExternalID  *string    `json:"externalId"`
	ExternalURL *string    `json:"externalUrl"`
}

type SubscriptionCursor struct {
	Results []Subscription `json:"results"`
	Cursor  *model.Cursor  `json:"cursor"`
}

type TicketCursor struct {
	Results []*Ticket     `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type TrackerCursor struct {
	Results []*Tracker    `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type Version struct {
	Major           int        `json:"major"`
	Minor           int        `json:"minor"`
	Patch           int        `json:"patch"`
	DeprecationDate *time.Time `json:"deprecationDate"`
}

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

var AllAccessKind = []AccessKind{
	AccessKindRo,
	AccessKindRw,
}

func (e AccessKind) IsValid() bool {
	switch e {
	case AccessKindRo, AccessKindRw:
		return true
	}
	return false
}

func (e AccessKind) String() string {
	return string(e)
}

func (e *AccessKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessKind", str)
	}
	return nil
}

func (e AccessKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccessScope string

const (
	AccessScopeProfile       AccessScope = "PROFILE"
	AccessScopeTrackers      AccessScope = "TRACKERS"
	AccessScopeTickets       AccessScope = "TICKETS"
	AccessScopeACLS          AccessScope = "ACLS"
	AccessScopeEvents        AccessScope = "EVENTS"
	AccessScopeSubscriptions AccessScope = "SUBSCRIPTIONS"
)

var AllAccessScope = []AccessScope{
	AccessScopeProfile,
	AccessScopeTrackers,
	AccessScopeTickets,
	AccessScopeACLS,
	AccessScopeEvents,
	AccessScopeSubscriptions,
}

func (e AccessScope) IsValid() bool {
	switch e {
	case AccessScopeProfile, AccessScopeTrackers, AccessScopeTickets, AccessScopeACLS, AccessScopeEvents, AccessScopeSubscriptions:
		return true
	}
	return false
}

func (e AccessScope) String() string {
	return string(e)
}

func (e *AccessScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessScope", str)
	}
	return nil
}

func (e AccessScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Authenticity string

const (
	AuthenticityAuthentic       Authenticity = "AUTHENTIC"
	AuthenticityUnauthenticated Authenticity = "UNAUTHENTICATED"
	AuthenticityTampered        Authenticity = "TAMPERED"
)

var AllAuthenticity = []Authenticity{
	AuthenticityAuthentic,
	AuthenticityUnauthenticated,
	AuthenticityTampered,
}

func (e Authenticity) IsValid() bool {
	switch e {
	case AuthenticityAuthentic, AuthenticityUnauthenticated, AuthenticityTampered:
		return true
	}
	return false
}

func (e Authenticity) String() string {
	return string(e)
}

func (e *Authenticity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Authenticity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Authenticity", str)
	}
	return nil
}

func (e Authenticity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeCreated         EventType = "CREATED"
	EventTypeComment         EventType = "COMMENT"
	EventTypeStatusChange    EventType = "STATUS_CHANGE"
	EventTypeLabelAdded      EventType = "LABEL_ADDED"
	EventTypeLabelRemoved    EventType = "LABEL_REMOVED"
	EventTypeAssignedUser    EventType = "ASSIGNED_USER"
	EventTypeUnassignedUser  EventType = "UNASSIGNED_USER"
	EventTypeUserMentioned   EventType = "USER_MENTIONED"
	EventTypeTicketMentioned EventType = "TICKET_MENTIONED"
)

var AllEventType = []EventType{
	EventTypeCreated,
	EventTypeComment,
	EventTypeStatusChange,
	EventTypeLabelAdded,
	EventTypeLabelRemoved,
	EventTypeAssignedUser,
	EventTypeUnassignedUser,
	EventTypeUserMentioned,
	EventTypeTicketMentioned,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeCreated, EventTypeComment, EventTypeStatusChange, EventTypeLabelAdded, EventTypeLabelRemoved, EventTypeAssignedUser, EventTypeUnassignedUser, EventTypeUserMentioned, EventTypeTicketMentioned:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketResolution string

const (
	TicketResolutionUnresolved  TicketResolution = "UNRESOLVED"
	TicketResolutionFixed       TicketResolution = "FIXED"
	TicketResolutionImplemented TicketResolution = "IMPLEMENTED"
	TicketResolutionWontFix     TicketResolution = "WONT_FIX"
	TicketResolutionByDesign    TicketResolution = "BY_DESIGN"
	TicketResolutionInvalid     TicketResolution = "INVALID"
	TicketResolutionDuplicate   TicketResolution = "DUPLICATE"
	TicketResolutionNotOurBug   TicketResolution = "NOT_OUR_BUG"
)

var AllTicketResolution = []TicketResolution{
	TicketResolutionUnresolved,
	TicketResolutionFixed,
	TicketResolutionImplemented,
	TicketResolutionWontFix,
	TicketResolutionByDesign,
	TicketResolutionInvalid,
	TicketResolutionDuplicate,
	TicketResolutionNotOurBug,
}

func (e TicketResolution) IsValid() bool {
	switch e {
	case TicketResolutionUnresolved, TicketResolutionFixed, TicketResolutionImplemented, TicketResolutionWontFix, TicketResolutionByDesign, TicketResolutionInvalid, TicketResolutionDuplicate, TicketResolutionNotOurBug:
		return true
	}
	return false
}

func (e TicketResolution) String() string {
	return string(e)
}

func (e *TicketResolution) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketResolution(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketResolution", str)
	}
	return nil
}

func (e TicketResolution) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketStatus string

const (
	TicketStatusReported   TicketStatus = "REPORTED"
	TicketStatusConfirmed  TicketStatus = "CONFIRMED"
	TicketStatusInProgress TicketStatus = "IN_PROGRESS"
	TicketStatusPending    TicketStatus = "PENDING"
	TicketStatusResolved   TicketStatus = "RESOLVED"
)

var AllTicketStatus = []TicketStatus{
	TicketStatusReported,
	TicketStatusConfirmed,
	TicketStatusInProgress,
	TicketStatusPending,
	TicketStatusResolved,
}

func (e TicketStatus) IsValid() bool {
	switch e {
	case TicketStatusReported, TicketStatusConfirmed, TicketStatusInProgress, TicketStatusPending, TicketStatusResolved:
		return true
	}
	return false
}

func (e TicketStatus) String() string {
	return string(e)
}

func (e *TicketStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketStatus", str)
	}
	return nil
}

func (e TicketStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityUnlisted,
	VisibilityPrivate,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityUnlisted, VisibilityPrivate:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
